<?php

/**
 * bosa module
 * Implements custom functionality for commerce for use with visitdanmark installation
 *
 * @author Thomas Thune Hansen <tth@bellcom.dk>
 * @version $0.1
 * @copyright 2012 bellcom open source aps
 */

include_once 'bosa.features.inc';

function bosa_menu() {
  $items = array();

  $items['admin/bosa'] = array(
    'title' => 'BOSA',
    'Description' => 'Administer BOSA',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access bosa administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -5,
  );

  // Administration
  $items['bosa'] = array(
    'title' => 'BOSA Backoffice',
    'Description' => '',
    'page callback' => 'bosa_backoffice_page',
    'access callback' => 'user_is_logged_in',
    'weight' => -5,
  );

  return $items;
}

/**
 * Implements hook_menu_alter()
 */
function bosa_menu_alter(&$items){
  // Override commerce cart page.
  if(isset($items['cart'])){
    $items['cart'] = array(
      'page callback' => 'bosa_cart_view_override_commerce_cart_view',
    ) + $items['cart'];
  }
}

/**
 * Pagecallback for commerce cart override
 */
function bosa_cart_view_override_commerce_cart_view(){
  global $user;

  // Default to displaying an empty message.
  $content = theme('commerce_cart_empty_page');

  // First check to make sure we have a valid order.
  if ($order = commerce_cart_order_load($user->uid)) {
      $wrapper = entity_metadata_wrapper('commerce_order', $order);

      // Only show the cart form if we found product line items.
      if (commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types()) > 0) {

        // Add the form for editing the cart contents.
        $content = commerce_embed_view('bosa_shopping_cart_form', 'default', array($order->order_id), 'cart');
        if (!empty($content)) {
          drupal_add_css(drupal_get_path('module', 'commerce_cart') . '/theme/commerce_cart.theme.css');
        }
      }
    }
    else {
      // Fallback to checkout
      drupal_goto('checkout');
    }

  return $content;
}

/**
 * Implements hook_permission()
 */
function bosa_permission() {
  return array(
    'access bosa administration pages' => array(
      'title' => t('Access BOSA administration pages'),
      'description' => t('Allow user to access BOSA administration pages'),
    ),
  );
}

/**
 * Implements hook_init()
 */
function bosa_init(){
  if(arg(0) == 'bosa'){
    drupal_add_css(drupal_get_path('module', 'bosa') . '/css/bosa-backoffice.css');
  }
}

function bosa_views_pre_render(&$view){
  $line_item_id = '';

  if (
    $view->name == 'bosa_shopping_cart_summary'
    ||
    $view->name == 'bosa_shopping_cart_form'
    ||
    $view->name == 'bosa_shopping_cart_block'
  ){
    foreach($view->result as $key => $result){
      $line_item_id_tmp = $result->commerce_line_item_field_data_commerce_line_items_line_item_;

      if($line_item_id == $line_item_id_tmp){
        unset($view->result[$key]);
      }

      $line_item_id = $line_item_id_tmp;
    }
  }
}

/**
 * Page callback for sellers
 */
function bosa_backoffice_page(){
  global $user;
  $oldstuff = '
    <div class="bosa-backoffice">
      <div class="bosa-category-container">
      <h2 class="bosa-category-title">Produkter</h2>
      <i class="bosa-icon bosa-icon-images"></i>
        <h3 class="bosa-category-subtitle">Tilføj</h3>
        <a href="/admin/commerce/products/add/offer">Produkter</a><br>
        <a href="/admin/commerce/products/add/produkt-uden-lager-dato">Produkt uden lager/dato</a> <br>
        <a href="/admin/commerce/products/add/produkt-uden-lager">Produkt uden lager</a> <br>
        <a href="/admin/commerce/products/add/offer-extras-custom">Tilvalgs produkter</a><br>

        <h3 class="bosa-category-subtitle">Se</h3>
        <a href="/admin/commerce/products">Produkter</a><br>
      </div>

      <div class="bosa-category-container">
        <h2 class="bosa-category-title">Visninger</h2>
        <i class="bosa-icon bosa-icon-layout"></i>
        <h3 class="bosa-category-subtitle">Tilføj</h3>
        <a href="/node/add/offer ">Produkt visning</a>

        <h3 class="bosa-category-subtitle">Se</h3>
        <a href="/offerlist">Produkt visninger</a><br>
     </div>

     <div class="bosa-category-container">
        <h2 class="bosa-category-title">Eftersalg</h2>
        <a href="/bosa/voucher/product/all"><i class="bosa-icon bosa-icon-group"></i>Deltagerlister</a>
        <a href="/admin/commerce/reports_products"><i class="bosa-icon bosa-icon-cash-register"></i>Salgsopgørelse</a>
     </div>
     ';
  if(in_array('Offer admin', $user->roles)){
    $oldstuff .= '
     <div class="bosa-category-container">
        <h2 class="bosa-category-title">Administration</h2>
        <a href="/admin/bosa"><i class="bosa-icon bosa-icon-tools"></i>BOSA Indstillinger</a>
        <a href="/bosa/products/permissions"><i class="bosa-icon bosa-icon-tools"></i>Produkt tilladelser</a>
     </div>
    </div>
    ';
  }
  else {
    $oldstuff .= '
     <div class="bosa-category-container">
        <h2 class="bosa-category-title">Administration</h2>
        <a href="/bosa/products/permissions"><i class="bosa-icon bosa-icon-tools"></i>Produkt tilladelser</a>
     </div>
    </div>
    ';
  }

  $output = '';

  return $oldstuff . $output;
}

/**
 * Implements hook_ctools_plugin_type
 */
function bosa_ctools_plugin_type() {
  // Define custom ctools plugin
  return array(
    'link' => array(
      'use hooks' => TRUE,
    ),
  );
}

/*
 * Implements hook_cron
 */
function bosa_cron() {
  // For some reason the cache_form, grows to enourmous sizes,
  // we clean up a little earlier that Drupal normally does
  $expiretime = time() - 360;

  $result = db_delete('cache_form')
    ->condition('created', $expiretime, '<')
    ->execute();

  /*
   * Automated abandoned carts cleanup
   */

  // We want to fetch the carts older than 24hours
  $expiredOrder = time() - 86400;

  // Prepare statement to get order_ids
  $oldOrdersStmt = db_query("SELECT order_id FROM {commerce_order} WHERE status != :status AND changed < :changed", array(
    ':status' => 'completed',
    ':changed' => $expiredOrder,
      ));

  // Fetch
  $oldOrders = $oldOrdersStmt->fetchAll();

  // Construct array with order_ids
  $oldOrderIds = array();
  foreach ($oldOrders as $oldOrder) {
    $oldOrderIds[] = $oldOrder->order_id;
  }

  // Use commerce_order_delete_multiple function to cleanly delete the orders
  commerce_order_delete_multiple($oldOrderIds);

  // Run function that prepares most popular offers
  bosa_popular_offers_cron();
}



/*
 * Implements hook block_info
 */
function bosa_block_info() {
  $blocks['bosa'] = array(
    'info' => t('Popular offers'),
  );

  return $blocks;
}

/*
 * Implements hook_block_view()
 */

function bosa_block_view($delta = '') {
  $content = bosa_popular_offers();

  switch ($delta) {
    case 'bosa':
      $block['subject'] = t('bosa - popular offers');
      $block['content'] = $content;
      break;
  }
  return $block;
}

/*
 * Function for calculating the most sold, active activity
 * @params
 *  none
 * @return
 *  none
 *
 * saves resulting html to drupal cache
 */

function bosa_popular_offers_cron() {
  // Get most popular events, which are still active
  $lineItemsStmt = db_query("SELECT n.title, l.quantity
   FROM
   `commerce_product` p,
   `field_data_field_reference` r,
   `field_data_field_offer_dato` d,
   `node` n,
   `commerce_line_item` l
   WHERE r.field_reference_product_id = p.product_id
   AND
   n.nid = r.entity_id
   AND
   p.type = 'offer'
   AND
   p.sku = l.line_item_label
   AND
   d.entity_id = p.product_id
   AND
   d.field_offer_dato_value < NOW() ");

  // Fetch
  $lineItems = $lineItemsStmt->fetchAll();

  // calculate the amount sold of each activity
  $lineItemArray = array();
  foreach ($lineItems as $lineItem) {
    $v = FALSE;
    foreach ($lineItemArray as $key => $val) {
      if ($key == $lineItem->title) {
        $v = TRUE;
      }
    }

    if ($v === TRUE) {
      $lineItemArray[$lineItem->title]['qty'] += round($lineItem->quantity);
    }
    else {
      $lineItemArray[$lineItem->title]['qty'] = round($lineItem->quantity);
    }
  }

  // sort the array
  arsort($lineItemArray);

  // we only want a list of the 6 most popular
  $lineItemArray = array_slice($lineItemArray, 0, 6);

  // build html for use in block
  $content = "<div class=\"popular-header\">Mest solgte events</div>";
  $content .= "<div class=\"popular-offers\">";
  foreach ($lineItemArray as $key => $val) {
    $nodeIdStmt = db_query("SELECT nid FROM {node} WHERE title = :title", array(':title' => $key,));
    $nodeId = $nodeIdStmt->fetch();


    $nodeImageStmt = db_query("SELECT f.uri FROM `file_managed`f, `field_revision_field_offer_images`i WHERE
    f.fid = i.field_offer_images_fid
    AND
    i.entity_id = :nid", array(':nid' => $nodeId->nid,));

    $nodeImage = $nodeImageStmt->fetch();
    $url = url(drupal_get_path_alias('node/' . $nodeId->nid));

    $content .= "<div class=\"row\">";
    $content .= "<a href=" . $url . "><img class=\"popular\" src=\"" . image_style_url('popular_offers', $nodeImage->uri) . "\"/>" . $key . "</a>";
    $content .= "</div>";
  }
  $content .= "</div>";

  // Save chunck for block use.
  cache_set('bosa_popular_offers', $content);
}

/*
 * Function used to retrieve popular offers html from drupal cache
 * @return
 *  string with formatted html for use in BLOCK
 */

function bosa_popular_offers() {
  $content = cache_get('bosa_popular_offers');
  if (!isset($content->data)) {
    bosa_popular_offers_cron();
  }
  return $content->data;
}
