<?php

/**
 * @file
 * Module file for handling logic regarding the reservation and automated
 * payment of orders.
 *
 * @author Jesper Mathiassen <jm@bellcom.dk>
 * @copyright Bellcom Open Source aps.
 */

/**
 * Implementats hook_menu().
 */
function bosa_reservation_menu() {
  $items['node/%/reservations'] = array(
    'title' => 'Current reservations',
    'description' => 'Your description goes here.',
    'access callback' => 'bosa_reservation_page_access',
    'access arguments' => array(1),
    'page arguments' => array(1),
    'page callback' => 'bosa_reservation_page',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_cron()
 */
function bosa_reservation_cron() {
  // Check all products for deadline.
  $cancel_info = bosa_reservation_cancel_reservations();

  bosa_reservation_refund_process($cancel_info);
}

/**
 * Access callback for reservations page.
 *
 * Only show on Offers pages.
 */
function bosa_reservation_page_access($nid) {
  global $user;
  $node = node_load($nid);
  return $node->type == 'offer' && $user->uid > 0;
}

/**
 * Page callback for reservations page.
 */
function bosa_reservation_page($nid) {
  $html = array();
  $node = node_load($nid);
  $product_ids = field_get_items('node', $node, 'field_reference');
  foreach ($product_ids as $product_id) {
    $product_id = array_shift($product_id);
    $head = array('Order ID', 'Link');
    $data = array();
    $info = _bosa_reservation_product_info($product_id);
    foreach ($info['orders'] as $order_id) {
      $data[] = array(
        $order_id,
        l(t('Edit'), 'admin/commerce/orders/' . $order_id)
      );
    }

    $html[$product_id] = "<h2>Product: " . l($product_id, 'admin/commerce/products/' . $product_id) . "</h2>\n" . theme('table', array('header' => $head, 'rows' => $data));
  }
  ksort($html);
  return implode('', $html);
}

/**
 * Helper function for retrieving relevant reservations info.
 *
 * @param int $pid
 *   Product ID
 *
 * @return array
 *   Information array
 */
function _bosa_reservation_product_info($pid) {
  if ($prod = commerce_product_load($pid)) {
    $min = field_get_items('commerce_product', $prod, 'field_mindste_antal');
    $min = empty($min) ? 0 : array_shift(array_shift($min));
    $stock = field_get_items('commerce_product', $prod, 'commerce_stock');
    $stock = empty($stock) ? 0 : array_shift(array_shift($stock));
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'commerce_line_item')
        ->propertyCondition('type', 'product')
        ->fieldCondition('commerce_product', 'product_id', $pid, '=')
        ->execute();
    $line_item_ids = isset($result['commerce_line_item']) ? array_keys($result['commerce_line_item']) : array();
    $orders = array();
    foreach (commerce_line_item_load_multiple($line_item_ids) as $line_item) {
      if ($line_item->order_id > 0) {
        $orders[] = $line_item->order_id;
      }
    }
    return array(
      'id' => (int) $pid,
      'min' => (int) $min,
      'stock' => (int) $stock,
      'count' => (int) count($orders),
      'orders' => $orders,
    );
  }
  else {
    return NULL;
  }
}

/**
 * Helper function for cancelling reservations for product with insufficient attendance
 *
 * <tth@bellcom.dk>
 *
 * @return
 *  array - order and product number/ids
 */
function bosa_reservation_cancel_reservations() {
  $cancel = array();

  // EntityFieldQuery and mySQL 'NOW()' doesnt seem to be friends
  $time = date('Y-m-d H:m:s');

  // fetch products between the activity date/time and last reservation date/time
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'commerce_product')
      ->propertyCondition('type', 'offer')
      ->propertyCondition('status', 1)
      ->fieldCondition('field_offer_dato', 'value', $time, '>') 
      ->fieldCondition('field_dato_og_tidspunkt_for_sids', 'value', $time, '<') 
      ->execute();
  
  $product_ids = array_keys(array_shift($result));

  foreach($product_ids as $product_id) 
  {
    $info = _bosa_reservation_product_info($product_id);

    if(empty($info['orders']))
    {
      continue;
    }
    if($info['count'] < $info['min'])
    {
      // invoke rule event, sending mails
      $product = commerce_product_load($product_id);
// TESTING    
 //     rules_invoke_event('bosa_reservation_product_close_to_deadline', $product); 

      // Doin some logging
      watchdog('bosa_reservation', 'cancel product: @product_id', array('@product_id' => $product_id), WATCHDOG_NOTICE);

      // Disable the product, so customers cant buy it again, and the mail action is not triggered again
      $product->status = 0;
      // TESTING
      //commerce_product_save($product);

      $cancel_info[$product->product_id] = $info['orders'];
    }
  }

  return $cancel_info;
}

/**
 * bosa_reservation_refund_process()
 *
 * Process refunds from associative array containing order numbers
 *  and product ids.
 *
 * @params
 *  $cancel_info 
 */
function bosa_reservation_refund_process($cancel_info){
  
  $orders = array();
  $prev_order_id = '';

  // Provide product_id and orders
  foreach($cancel_info as $product_id => $orders) {
    // Provide order_id
    foreach($orders as $order_id){

      // We dont want to process same order twice
      if($prev_order_id == $order_id){
        continue;
      }

      // Load orders, we need to pass this on
      $order = commerce_order_load($order_id);

      // Get amount to refund
      $amount = _bosa_reservation_refund_get_amount($order, $product_id);

      bosa_reservation_refund_payment($order, $amount);

      // Remember order_id
      $prev_order_id = $order_id;
    }
  }
}

/**
 * bosa_reservation_refund_payment()
 *
 * Handles refund.
 *
 * @params:
 *  $order - order object
 *  $amount - amount to refund (format: ) 
 */
function bosa_reservation_refund_payment($order, $amount){
  // Create transaction for refund
  $last_transaction = commerce_payment_fetch_last_payment_transaction($order->order_id);
  $payment_method = commerce_payment_method_instance_load($last_transaction->instance_id);
  $qp = new Quickpay($payment_method['settings']);
  $txn = $qp->transaction($last_transaction->remote_id);

  // QuickPay refunc amount
  $txn->refund($amount);

  $transaction->payload[REQUEST_TIME] = $txn;

  if ($txn->success()) {
    // Doin some logging
    watchdog('bosa_reservation', 'refund completed order: @order', array('@order' => $order), WATCHDOG_NOTICE);
    
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  }
  else {
    // Doin some logging
    watchdog('bosa_reservation', 'refund failed order_id: @order', array('@order' => $order), WATCHDOG_NOTICE);
    
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  commerce_payment_transaction_save($transaction);
}

/**
 * Get amount to refund.
 *
 * Checks complete order to see if more products with given id
 * is present. Also checks for referenced products (extra products)
 * and returns amount for all. 
 */
function _bosa_reservation_refund_get_amount($order, $product_id) {
  $product = commerce_product_load($product_id);

  // Load all lineitems in order
  $line_items = commerce_line_item_load_multiple($order->commerce_line_items[LANGUAGE_NONE]); 
  $referenced_line_item_ids = array();
  $line_item_ids = array();
  $line_item_price = '';
  $referenced_line_item_price = '';

  // Iterate over all line items in order
  foreach($line_items as $key => $line_item)
  {
    // Get administration tax, save for later use
    if($line_item->line_item_label == 'Administrationsgebyr')
    {
      $administration_tax = $line_item->commerce_total[LANGUAGE_NONE][0]['amount'];
      continue;
    }

    $line_item_product_id = $line_item->commerce_product[LANGUAGE_NONE][0]['product_id'];
    $line_item_product = commerce_product_load($line_item_product_id);

    // Check wether the line item has the same product id
    // as the product we are cancelling
    if($line_item_product_id == $product_id)
    {
      $line_item_quantity = $line_item->quantity;
      $line_item_price += $line_item->commerce_total[LANGUAGE_NONE][0]['amount'];
      $line_item_ids[] = $line_item->line_item_id;
    }

    // Check if the product is referenced to the reservated product.
    if(!empty($line_item->field_line_item_ref))
    {
      if($line_item->field_line_item_ref[LANGUAGE_NONE][0]['value'] == $product_id)
      {
        // Save these so we can remove them also, if needed
        $referenced_line_item_ids[] = $line_item->line_item_id;
        $referenced_line_item_price += $line_item->commerce_total[LANGUAGE_NONE][0]['amount'];
      }
    }
  }

  $calculated_total = $referenced_line_item_price + $line_item_price + $administration_tax;

  // Amount to refund
  $amount = $referenced_line_item_price + $line_item_price;
  
  // If the order total is the same as order total, refund all
  // This is only releveant because of the administration tax.
  if($calculated_total == $order->commerce_order_total[LANGUAGE_NONE][0]['amount']) {
    $amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
  }

  return $amount;
}
