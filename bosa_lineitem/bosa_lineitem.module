<?php
/*
 * Implements hook_form_alter
 *
 * Unsetting standard add to cart form, when the product is set
 * to be sold with 2 prices.
 */
function bosa_lineitem_form_alter(&$form, &$form_state, $form_id){

  if(strstr($form['#id'], 'commerce-cart-add-to-cart-form'))
  {
    $commerce_product = commerce_product_load_by_sku($form['line_item_fields']['#entity']->line_item_label);
    
    // if second price fields are set
    if (!empty($commerce_product->field_2nd_price_select))
    {
      if ($commerce_product->field_2nd_price_select[LANGUAGE_NONE][0]['value'] == 1)
      {
        $current_currency = commerce_multicurrency_get_user_currency_code();
        $price = $commerce_product->field_2nd_price[LANGUAGE_NONE][0]['amount'];
        $converted_price = commerce_currency_convert($price, "DKK", $current_currency);
        $formatted_price = commerce_currency_format($converted_price, $current_currency);

        $text = '&nbsp';

        if (!empty($commerce_product->field_venteliste_check)) {
          if ($commerce_product->field_venteliste_check[LANGUAGE_NONE][0]['value'] == 1) {
            $text = t('Waitinglist');
          }
        }
        // use the extra data and add a new button
        unset($form['submit']);
        unset($form['#action']);
        unset($form['quantity']);
        $form['#submit'] = array('bosa_lineitem_submit');

        $form['quantity'] = array(
          '#type' => 'textfield',
          '#weight' => 85,
          '#default_value' => 1,
          '#datatype' => 'number',
        );

        $form['submit'] = array(
          '#type' => 'submit',
          '#weight' => 90,
          '#value' => t('Add to cart'),
        );
        $form['text'] = array(
          '#type' => 'item',
          '#weight' => 92,
          '#markup' => '<div class="date">' . $text . '</div><div class="ledige_pladser">&nbsp</div><div class="price">'.$formatted_price.'  - '.t('child').'</div>' ,
        );

        $form['quantity2'] = array(
          '#type' => 'textfield',
          '#weight' => 95,
          '#default_value' => 1,
            '#datatype' => 'integer',
        );

        $form['submit2'] = array(
          '#type' => 'submit',
          '#weight' => 100,
          '#value' => t('Add to cart 2'),
        );
      }
    }
    if ($commerce_product->type == "offer_extras_custom")
    {
      unset($form['submit']);
      $form['#submit'] = array('bosa_lineitem_submit');
      $form['submit_extra'] = array(
        '#type' => 'submit',
        '#weight' => 120,
        '#value' => t('Add to cart'),
      );
    }
    $form['node_id'] = array(
     '#type' => 'textfield',
     '#access' => 0,
     '#value' => $form['#action'],
    );
    return $form;
  }
}

/**
 * Custom submit callback
 * calls the correct cart submit function for the given product
 */
function bosa_lineitem_submit(&$form, &$form_state){
  switch($form_state['clicked_button']['#parents'][0]){
    case 'submit':
      commerce_cart_add_to_cart_form_submit($form, $form_state); 
      break;

    case 'submit2':
      bosa_lineitem_add_2nd_price_to_cart_submit($form, $form_state);
      break;
   
    case 'submit_extra':
      bosa_lineitem_add_extras_to_cart_submit($form, $form_state);
      break;
  }
}

/**
 * Callback function adds line item with 2nd price set, to shopping cart.
 * Also sets comment on line item, used when the price is recalculated
 * by RULES
 * This function is basicly just a rewrite of 'commerce_cart_add_to_cart_form_submit'
 * Return is markup, JS, that refreshes the current page. Jumping through 
 * hoops here....
 *
 * @access public
 * @param
 *  $form
 *  $form_state
 * @return 
 *  string
 **/
function bosa_lineitem_add_2nd_price_to_cart_submit(&$form, &$form_state){
  
  $product_id = $form_state['values']['product_id'];
  $product = commerce_product_load($product_id);
  
  $line_item = commerce_product_line_item_new($product, $form_state['values']['quantity2'], 0);

  field_attach_submit('commerce_line_item', $line_item, $form['line_item_fields'], $form_state);

  $current_currency = commerce_multicurrency_get_user_currency_code();
  $price = $product->field_2nd_price[LANGUAGE_NONE][0]['amount'];
  $converted_price = commerce_currency_convert($price, "DKK", $current_currency);
  
  // loading the lineitem into an entity wrapper 
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  $line_item_wrapper->commerce_unit_price->amount = $converted_price;

  // updating the base price
  $line_item_wrapper->commerce_unit_price->data = array(
    'components' => array(
      0 => array(
        'name' => 'base_price',
        'price' => array(
          'amount' => $converted_price,
          'currency_code' => $current_currency
        ),
      ),
    ),
  );

  // we want to be able to see that this product has been sold with the other price
  // this is used later on when we set the price again
  $line_item_wrapper->field_line_item_comment = 'Anden pris';  

  commerce_line_item_save($line_item);
  // save the lineitem to the order
  $form_state['line_item'] = commerce_cart_product_add(
    $form_state['values']['uid'],
    $line_item,
    0
  );
}

/**
 * Callback function adds line item to cart with reference product
 *
 * @access public
 * @param 
 * @return 
 **/
function bosa_lineitem_add_extras_to_cart_submit(&$form, &$form_state){
  error_log('add extras to cart');

  $path_details = explode('/', $form_state['values']['node_id']);

  // if the node doesnt have a url alias
  if($path_details[2] == 'node') {
    $nodeid[1] = $path_details[3];
  }
  else {
    $node_path = drupal_lookup_path("source",$path_details[2].'/'.urldecode($path_details[3]), $path_details[1]);
    $nodeid = explode('/', $node_path);
  }

  global $user;
  $order = commerce_cart_order_load($user->uid);
  $node = node_load($nodeid[1]);

  // create a list of products in the cart
  $cart_products = array();
  foreach ($order->commerce_line_items[LANGUAGE_NONE] as $lineitem)
  {
    $line_item_entity = commerce_line_item_load($lineitem['line_item_id']);
    $line_item_product_id =  $line_item_entity->commerce_product[LANGUAGE_NONE][0]['product_id'];

    if(in_array($line_item_product_id, $cart_products))
    {
      continue;
    }
    
    $cart_products[] =  $line_item_product_id;
  }
  
  // create list of referenced products
  $referenced_products = array();
  foreach($node->field_reference[LANGUAGE_NONE] as $reference)
  {
    $product_entity = commerce_product_load($reference['product_id']);

    if( $product_entity->type == "offer" || $product_entity->type == "produkt_uden_lager_dato" || $product_entity->type == "produkt_uden_lager"  )
    {
      $referenced_products[] = $reference['product_id'];
    }
  }

  // check if these match
  $result = array_intersect($cart_products, $referenced_products);
  
  switch( count($result) )
  {
    case(0):
      drupal_set_message(t('You have not chosen an activity that fits this extra product'), 'warning');
      break;
    
    case(1):
      $product_id_ref = reset( array_intersect($cart_products, $referenced_products));

      $product_id = $form_state['values']['product_id'];
      $product = commerce_product_load($product_id);
      $line_item = commerce_product_line_item_new($product, $form_state['values']['quantity'], 0, array(), 'product_comment');

      field_attach_submit('commerce_line_item', $line_item, $form['line_item_fields'], $form_state);

      // loading the lineitem into an entity wrapper 
      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

      // we want to be able to see that this product has been sold with the other price
      // this is used later on when we set the price again
      $line_item_wrapper->field_line_item_ref = $product_id_ref;  
      
      commerce_line_item_save($line_item);
      // save the lineitem to the order
      $form_state['line_item'] = commerce_cart_product_add(
        $form_state['values']['uid'],
        $line_item,
        0
      );
      break;
    
    default:
      drupal_set_message(t('You cannot purchase extra products if you have chosen more than one date for an activity. If you want this, you must create another booking'), 'warning');
      break;
  }
}

/**
 * Reset the product price, when the item has been sold with the 2nd price
 * chosen.
 * Function is called by RULE "calculate_sell_price".
 *
 * @access public
 * @param 
 *   $line_item - commerce line item passed by RULES
 * @return 
 *   nothing
 **/
function bosa_lineitem_calculate_sell_price($line_item){
  if(isset($line_item->field_line_item_comment[LANGUAGE_NONE][0]))
  {
    if($line_item->field_line_item_comment[LANGUAGE_NONE][0]['value'] == 'Anden pris')
    {
      $product = commerce_product_load_by_sku($line_item->line_item_label);

      if(isset($product->field_2nd_price[LANGUAGE_NONE][0]['amount']))
      {
        $current_currency = commerce_multicurrency_get_user_currency_code();
        $price = $product->field_2nd_price[LANGUAGE_NONE][0]['amount'];
        $converted_price = commerce_currency_convert($price, "DKK", $current_currency);

        // loading the lineitem into an entity wrapper
        $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
        
        // updating the unit price
        $line_item_wrapper->commerce_unit_price->amount = $converted_price;
        
        // updating the base price
        $line_item_wrapper->commerce_unit_price->data = array(
          'components' => array(
            0 => array(
              'name' => 'base_price',
              'price' => array(
                'amount' => $converted_price,
                'currency_code' => $current_currency
              ),
            ),
          ),
        );
        commerce_line_item_save($line_item);
      }
    }
  }
}

