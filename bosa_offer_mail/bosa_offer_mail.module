<?php
/**
 * bosa_offer_mail module
 *
 * @author Thomas Thune Hansen <tth@bellcom.dk>
 * @version $0.1
 * @copyright 2012 bellcom open source aps
 **/


/**
 * Implements hook_menu()
 */
function bosa_offer_mail_menu() {
  $items['aktiviteter_pdf'] = array(
   'page callback' => 'bosa_offer_mail_pdf',
   'access arguments' => array('access content'), 
  );
  $items['admin/bosa/mail'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bosa_offer_mail_admin'),
    'title' => 'BOSA Mail settings',
    'description' => 'Change settings for voucher mail',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer bosa offer mail'), 
  );

  return $items;
}

/**
 * Implements hook_permission()
 */
function bosa_offer_mail_permission() {
  return array(
    'administer bosa offer mail' => array(
      'title' => t('Administer BOSA offer mail'),
      'description' => t('Set up mail for order completion'),
    ),
  );
}

/**
 * Page callback for admin settings
 */
function bosa_offer_mail_admin($form, &$form_state){
  $form['title'] = array(
    '#type' => 'item',
    '#title' => 'BOSA Mail settings',
  );

  $form['bosa_offer_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => 'Subject',
    '#default_value' => variable_get('bosa_offer_mail_subject'),
  );

  $form['bosa_offer_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => 'Message',
    '#default_value' => variable_get('bosa_offer_mail_body'),
  );

  $form['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('commerce-order'), // The token types that have specific context. Can be multiple token types like 'term' and/or 'user'
    '#global_types' => TRUE, // A boolean TRUE or FALSE whether to include 'global' context tokens like [current-user:*] or [site:*]. Defaults to TRUE.
    '#click_insert' => TRUE, // A boolean whether to include the 'Click this token to insert in into the the focused textfield' JavaScript functionality. Defaults to TRUE.
    );
    return system_settings_form($form);
}

/**
 * page callback for menu hook
 *
 * @access public
 * @param 
 *  int $order_id, order id from commerce
 *  int $arg, profile_id and order created time
 * @return 
 *  _bosa_offer_mail_create_pdf callback
 */
function bosa_offer_mail_pdf($order_id, $arg){
  global $user;

  $order = commerce_order_load($order_id);

  entity_get_controller('commerce_order')->resetCache(array($order->order_id));

  $key = $order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id'];
  $key .= $order->created;

  if(is_object($order)){

    if($key == $arg || (in_array('administrator', $user->roles) || in_array('Offer admin', $user->roles ) ))
    {
      return _bosa_offer_mail_create_pdf($order);
    }
    else {
      return "";
    }
  }
  else {
    return "";
  }
}

/**
 * Create markup for voucher
 *
 * @return
 *  markup
 */
function _bosa_offer_mail_markup($order){

  global $base_url;

  $currentpage = 0;
  $pages = 0;

  $view = '<html>
    <head>
    <link rel="stylesheet" type="text/css" href="'.$base_url.'/'.drupal_get_path('module', 'bosa_offer_mail').'/css/pdf.css">
        <meta http-equiv="content-type" content="text/html;charset=utf-8">
        </head>
        <body>';

  foreach ($order->commerce_line_items[LANGUAGE_NONE] as $value)
  {
    $line_item_entity = commerce_line_item_load($value['line_item_id']);
    
    if(!empty($line_item_entity->field_line_item_ref))
    {
      $product_reference[$line_item_entity->field_line_item_ref[LANGUAGE_NONE][0]['value']][] = array(
        'title' => $line_item_entity->line_item_label,
        'quantity' => $line_item_entity->quantity,
        'comment' => !empty($line_item_entity->field_line_item_comment) ? $line_item_entity->field_line_item_comment[LANGUAGE_NONE][0]['value'] : '',
      );
    }

    if($line_item_entity->type == 'product') {
      $pages++;
    }
  }

  // The actual page markup generation
  foreach ($order->commerce_line_items[LANGUAGE_NONE] as $value)
  {
    $currentpage++;
  
    $node_id = bosa_offer_mail_get_node_ids(array($value));
    if (is_array($node_id)) 
    {
      $line_item_entity = commerce_line_item_load($value['line_item_id']);
      if($line_item_entity->type == 'product')
      {
        $commerce_product_entity = commerce_product_load($line_item_entity->commerce_product[LANGUAGE_NONE][0]['product_id']);
        $view .= '<table><tr>
              <td class="left">
              <div class="header">Lillebælt Waters - VisitMiddelfart</div>
              <div class="ticket title">Billet oplysninger</div>';
	$view .= '
		<div class="text">
Dear Guest<br />
Thank you very much for booking activities at Lillebælt Waters.<br />
This is your ticket - <u>please bring it when you turn up at your booked activity. </u><br />
We wish you a pleasant stay, and hope to see you again soon. <br /><br />

		</div>

	  ';
      
    
        $view .= 
          '<span class="label">Produkt: </span><span class="field title">'.$commerce_product_entity->title.'</span><br />'.
          '<span class="label">Dato og tidspunkt:</span><span class="field">'.$commerce_product_entity->field_offer_dato[LANGUAGE_NONE][0]['value'].'</span><br />'.
          '<span class="label">Antal: </span><span class="field">'.$line_item_entity->quantity.'</span><br />'.
          '<span class="label"></span><span class="field">'.$line_item_entity->field_line_item_comment[LANGUAGE_NONE][0]['value'].'</span>';

        $view .= '</td><td class="right"><img src="'.drupal_get_path('module', 'bosa_offer_mail').'/css/img/handtag.png"/></td></tr></table>';
        $view .= views_embed_view('offer_additionlal_info', 'page_1', $node_id[0]);
      }
      
      // list extra products
      if(isset($product_reference[$line_item_entity->data['context']]) || !empty($product_reference[$line_item_entity->data['context']['product_ids'][0]]))
      {
        $view .= '<div class="extras">Tilkøbsprodukter</div>';
        foreach($product_reference[$line_item_entity->data['context']['product_ids'][0]] as $product_extras)
        {
          $view .= '<span class="label">Produkt: </span><span class="field">'.$product_extras['title'].'</span><br />';
          $view .= '<span class="label">Antal: </span><span class="field">'.$product_extras['quantity'].'</span><br />';
          $view .= '<span class="label">Kommentar: </span><span class="field">'.$product_extras['comment'].'</span><br />';
        }
      }
    }
    // if there are more products on the order we want a pretty page break
    if($pages > $currentpage)
    {
      $view .= '<div class="page-break"></div>';
    }
  }


  $view .= '</body></html>';

  $view = str_replace($base_url.'/', '', $view);

  //error_log(print_r($view, 1));

  //print $view;

  //die();
  
  return $view;
}

function _bosa_offer_mail_create_pdf($order, $param = NULL){
  require_once libraries_get_path('dompdf') . '/dompdf_config.inc.php';

  $view = _bosa_offer_mail_markup($order);
  
  $dompdf = new DOMPDF();

  $dompdf->load_html($view);
  $dompdf->set_paper("a4","portrait");
  $dompdf->render();

  if($param == 'file') {
    return $dompdf->output();
  }

  $dompdf->stream('Ordre_'.$order->order_id.'.pdf');
}

function bosa_offer_mail_save_pdf($order_id) {
  $order = commerce_order_load($order_id);
  $pdf = _bosa_offer_mail_create_pdf($order, 'file');

  $file = file_save_data($pdf, 'public://Ordre_'.$order_id. '.pdf');

  return drupal_realpath($file->uri);
}

/**
 * Implements hook_mail()
 */
function bosa_offer_mail_mail($key, &$message, $params) {

  $pdf_path = bosa_offer_mail_save_pdf($params['order_id']);

  $attachment = array(
    'filecontent' => $pdf_path,
    'filename' => 'Ordre_' . $params['order_id'] . '.pdf',
    'filemime' => 'application/pdf',
  );

  $body = variable_get('bosa_offer_mail_body');
  $subject = variable_get('bosa_offer_mail_subject');

  $order = commerce_order_load($params['order_id']);

  $body = token_replace($body, array('commerce-order' => $order));
  $subject = token_replace($subject , array('commerce-order' => $order));

  switch($key) {
    case 'voucher':
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      $message['subject'] = $subject;
      $message['body'][] = $body;
      $message['params']['attachments'][] = $attachment;
      break;
  }
}

/**
 * Implements hook_commerce_checkout_complete()
 */
function bosa_offer_mail_commerce_checkout_complete($order) {
  $params['order_id'] = $order->order_id;

  drupal_mail('bosa_offer_mail', 'voucher', $order->mail, 'da', $params);
}

/**
 *
 */
function bosa_offer_mail_get_node_ids($line_items) {
  $node_ids = array();

  foreach($line_items as $line_item)
  {
    // load lineitem to get line_item_label
    $line_item_entity = commerce_line_item_load($line_item['line_item_id']);
    
    // load product to get id
    $product_entity = commerce_product_load_by_sku($line_item_entity->line_item_label);

    if(!is_object($product_entity)){
      continue;
    }
    // entity search for nodes with products attached
    $query = new EntityFieldQuery;

    $query->entityCondition('entity_type', 'node')
      ->fieldCondition('field_reference', 'product_id', $product_entity->product_id, '=');

    $result = $query->execute();
    if(is_array($result['node']))
    {
      $result = reset($result['node']);
    }
    // save node ids
    if (in_array($result->nid, $node_ids))
    {
      continue;
    }
    $node_ids[] = $result->nid;
  }
  
  return $node_ids;
}
